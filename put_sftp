#!/usr/bin/php
<?php
// Used by the new cvs to web to sftp files (using expect and sftp
// command-line utils) to a server.
//
// USAGE:  put_sftp username:password@machine:/folder options /absolute/path/to/local/files file1 file2 file3...
//   (password is optional if ssh/sftp has been setup to not require it)
//
// Creates a batch 'expect' script to feed commands to sftp.
//
if( !defined('STDERR') ) define(STDERR, fopen('php://stderr', 'w') );
/*
fwrite(STDERR, "\n0: ".$_SERVER['argv'][0]); //scriptname (this script)
fwrite(STDERR, "\n1: ".$_SERVER['argv'][1]); //connection string
fwrite(STDERR, "\n2: ".$_SERVER['argv'][2]); // options
fwrite(STDERR, "\n3: ".$_SERVER['argv'][3]); // local ftp path
fwrite(STDERR, "\n4: ".$_SERVER['argv'][4]); // file list
*/

$remoteStuff = $_SERVER['argv'][1];
$options = $_SERVER['argv'][2];
$localStuff = $_SERVER['argv'][3];

array_shift($_SERVER['argv']); //remove the script filename
array_shift($_SERVER['argv']); //remove the connection string (remoteStuff)
array_shift($_SERVER['argv']); //remove the local dir
array_shift($_SERVER['argv']); //remove the options

if (preg_match('/(.*):(.*)@(.*):(.*)/', $remoteStuff, $matches)) {
  $user = $matches[1];
  $password = $matches[2];
  $machine = $matches[3];
  $dir = $matches[4];
}
elseif (preg_match('/(.*)@(.*):(.*)/', $remoteStuff, $matches)) {
  $user = $matches[1];
  $password = "";
  $machine = $matches[2];
  $dir = $matches[3];
}
else {
  fwrite(STDERR, "$remoteStuff  must be:  user:password@machine:dir\nYou sent: {$_SERVER['argv']}\n");
  exit(1);
}

$dirs = array();
$d = $dir;
while ($d != "" && $d != "/" && $d != ".") {
  array_unshift($dirs, $d);
  $d = dirname($d);
}
array_shift($dirs); // Don't try to create root-level directory.

// Create list of FTP commands:
$ftpCommands = array();
$ftpCommands[] = "lcd $localStuff";
foreach ($dirs AS $d) { // Simulate mkdir -p:
  $ftpCommands[] = "-mkdir ".escapeshellarg($d);
}
$ftpCommands[] ="cd ".escapeshellarg($dir);
$cwd = "";  // Keep track of current working directory...
foreach ($_SERVER['argv'] AS $f) {
  putFile($ftpCommands, $f, $cwd);  // Puts files, creating directories as needed
}
$ftpCommands[] ="exit";

// Yay, now gotta write an 'expect' script file:
$expectFilename = tempnam("/tmp", "expect_commands");
$expectFile = fopen($expectFilename, "w");
fwrite($expectFile, "set timeout 120\n");
fwrite($expectFile, "spawn -noecho sftp $options $user@$machine\n");

$s = <<<EXPECTSTUFF
expect {
  "password:" { send "$password\r"; exp_continue }
  "(yes/no)?" { send "yes\r"; exp_continue }
  "Permission denied" { exit 1 }
  "sftp>" { send "progress\r"  }
  timeout { send_error "sftp timeout\n"; exit 1 }
}  

EXPECTSTUFF;
fwrite($expectFile, $s);
foreach ($ftpCommands AS $command) {
  fwrite($expectFile, "expect {\n" );
  fwrite($expectFile, " \"sftp>\" { send -- \"$command\r\" }\n" );
  fwrite($expectFile, " \"Permission denied\" { exit 1 }\n" );
  fwrite($expectFile, " timeout { send_error \"sftp timeout\\n\"; exit 1 } \n") ;
  fwrite($expectFile, "}\n" );
}
fwrite($expectFile, "exit 0\n");
fclose($expectFile);

// Note: add -d to expect to help debug problems...
exec("/usr/bin/expect -b $expectFilename 2>&1", $output, $err);

unlink($expectFilename);

if ($err) {
   fwrite(STDERR, implode("\n", $output));
   exit($err);
}

function putFile(&$ftpCommands, $f, &$cwd)
{
  $d = dirname($f);
  if ($d == "." or $d == "/") { $d = ""; }
  $baseF = basename($f);
  if ($d != $cwd) {
    doDirectoryNonsense($ftpCommands, $d, $cwd);
  }
  $ftpCommands[] ="put ".escapeshellarg($f)." ".escapeshellarg($baseF);
}

// Create intermediate directories down to $d, and 
// change directory to d.
function doDirectoryNonsense(&$ftpCommands, $d, &$cwd)
{
  if (empty($cwd)) { $dirs1 = array(); }
  else {  $dirs1 = explode('/', $cwd); }
  if (empty($d)) { $dirs2 = array(); }
  else { $dirs2 = explode('/', $d); }

  // Remove common ancestors:
  while ((count($dirs1) > 0) && (count($dirs2) > 0) && ($dirs1[0] == $dirs2[0])) {
    array_shift($dirs1);
    array_shift($dirs2);
  }
  if (!empty($dirs1)) {
    $up .= str_repeat("../", count($dirs1)); // Go up to common ancestor...
    $ftpCommands[] ="cd $up";
  }
  if (!empty($dirs2)) {
    foreach ($dirs2 AS $dd) {
      $ftpCommands[] ="-mkdir ".escapeshellarg($dd);
      $ftpCommands[] ="cd ".escapeshellarg($dd);
    }
  }
  $cwd = $d;
}

?>
