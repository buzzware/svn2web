#!/usr/bin/php
<?php
error_reporting(E_ALL);

interface IException {

		// from http://php.net/manual/en/language.exceptions.php

    /* Protected methods inherited from Exception class */
    public function getMessage();                 // Exception message
    public function getCode();                    // User-defined Exception code
    public function getFile();                    // Source filename
    public function getLine();                    // Source line
    public function getTrace();                   // An array of the backtrace()
    public function getTraceAsString();           // Formated string of trace

    /* Overrideable methods inherited from Exception class */
    public function __toString();                 // formated string for display
    public function __construct($message = null, $code = 0);
}

abstract class CustomException extends Exception implements IException {

    protected $message = 'Unknown exception';     // Exception message
    private   $string;                            // Unknown
    protected $code    = 0;                       // User-defined exception code
    protected $file;                              // Source filename of exception
    protected $line;                              // Source line of exception
    private   $trace;                             // Unknown

    public function __construct($message = null, $code = 0)
    {
        if (!$message) {
            throw new $this('Unknown '. get_class($this));
        }
        parent::__construct($message, $code);
    }

    public function __toString()
    {
        return get_class($this) . " '{$this->message}' in {$this->file}({$this->line})\n"
                                . "{$this->getTraceAsString()}";
    }
}

class ExecException extends CustomException {}

// Executes the given command and returns the result as a string, even if returned as array
// If the exit code of the command is non-zero, it will die with the result as a message
function execSafe($command,$workingFolder=null) {
	$dir_before = getcwd();
	if ($workingFolder)
		chdir($workingFolder);
	print $command."\n";
	exec($command,$result,$retcode);
	chdir($dir_before);
	if (is_array($result))
		$result = join("\n", $result);
	print $result."\n";
	if ($retcode)
		throw new ExecException($command." failed (exit code ".$retcode.") result:\n".$result,$retcode);
	return $result;
}

function startsWith($haystack, $needle, $case=true) {
	$length = strlen($needle);
	$ss = substr($haystack, 0, $length);
	if ($case)
		return strcmp($ss,$needle)==0;
	else
		return strcasecmp($ss,$needle)==0;
}

function endsWith($haystack, $needle, $case=true) {
	$length = strlen($needle);
	$start =  $length *-1; //negative
	$ss = substr($haystack, $start, $length);
	if ($case)
		return strcmp($ss,$needle)==0;
	else
		return strcasecmp($ss,$needle)==0;
}

function revOrTransactionForSvn($input) {
	$result = $input;
	if (preg_match('/^\d+$/', $input)) {
		$result = "-r $input";
	} else {
		if (!startsWith($input,'-'))
			$result = "-t $input";
	}
	return $result;
}


function svnlook(
	$aCommand,
	$aRepository,
	$aRevOrTransaction,
	$aRest=null
) {
	if (!$aRest)
		$aRest = '';
	$r = revOrTransactionForSvn($aRevOrTransaction);
  return execSafe("svnlook $aCommand $r $aRepository $aRest");
}


// if php is not running as CLI, STDERR is not defined by default and cause error (dont print the error on svn log)
if( !defined('STDERR') ) define(STDERR, fopen('php://stderr', 'w') );

$thisDir = dirname($_SERVER['argv'][0]);
if (empty($thisDir) or ($thisDir == ".")) { $thisDir = getcwd(); }

$scriptName = basename($_SERVER['argv'][0]);
array_shift($_SERVER['argv']);

$usage = "$scriptName REPOS-PATH REVISION\n";
if (count($_SERVER['argv']) < 2) {
   echo $usage; exit(1);
}

$repository = $_SERVER['argv'][0];
$revision = $_SERVER['argv'][1];
$transaction = null;
if (preg_match('/^\d+$/', $revision)) {
  $revOrTransaction = "-r $revision";
}
else { // Used as pre-commit hook: given transaction name:
  $transaction = $revision;
  $revision = null;
  $revOrTransaction = "-t $transaction";
}
          
echo "revision=$revision\n";
echo "transaction=$transaction\n";
echo "revOrTransaction=$revOrTransaction\n";
          
// First: use svnlook to get a list of the changed files/dirs:
$changed = svnlook('changed',$repository,$revOrTransaction);

$lines = explode("\n",$changed);

$extraWheres = array();
$dirsAdded = array();
$dirsDeleted = array();
$filesModified = array();
$filesDeleted = array();
$propCache = array();

foreach ($lines AS $line) {
  preg_match('/^(.).\s*(.*)/', $line, $matches);
  if (count($matches) != 3) { continue; }

  $what = $matches[1];
  $where = $matches[2];
  $is_dir = (substr($where, -1) == "/");

  // For deleted stuff: wanna use previous (before-deleted) revision to get
  // svn2web property:
  if ($what == "D") {
    if ($revision) { 
			$prevRevision = $revision-1; 
		} else { 
			$prevRevision = intval($transaction); 
		} // Will be, e.g. 20-1
    list($servers, $relativePath) = getSVN2WebProp($where, $repository, $propCache, $prevRevision);
		$options = getSVN2WebOptionsProp($where, $repository, $prevRevision);
  }
  else {
    // Conscious decision here to use latest&greatest revision for what to copy where:
    list($servers, $relativePath) = getSVN2WebProp($where, $repository, $propCache, $revOrTransaction);
		$options = getSVN2WebOptionsProp($where, $repository, $revOrTransaction);
  }

  if ($servers === null or empty($servers)) { continue; }
  
  $s = explode("\n", $servers);

  if ($is_dir and $what == "A") {
    foreach ($s AS $server) {
      $dirsAdded[$server][] = array($where, $relativePath."/");
      
      // use svnlook to get a list of the implicitly added files/dirs:
      $subWhere = svnlook('tree',$repository,$revOrTransaction,"--full-paths $where");  // execSafe("svnlook tree --full-paths $revOrTransaction $repository $where");
      $subWheres = explode("\n",$subWhere);
      $extraWheres = array_merge($extraWheres, $subWheres);
    }
  }
  elseif ($what == "A") {
    foreach ($s AS $server) {
      $filesModified[$server][] = array($where, $relativePath);
    }
  }
  elseif ($is_dir and $what == "D") {
    foreach ($s AS $server) {
      $dirsDeleted[$server][] =  array($where, $relativePath."/");
    }
  }
  elseif ($what == "D") {
    foreach ($s AS $server) {
      $filesDeleted[$server][] = array($where, $relativePath);
    }
  }
  elseif ($what == "U") {
    foreach ($s AS $server) {
      $filesModified[$server][] = array($where, $relativePath);
    }
  }
}

foreach ($extraWheres AS $where) {
  $is_dir = (substr($where, -1) == "/");

  // Conscious decision here to use latest&greatest revision for what to copy where:
  list($servers, $relativePath) = getSVN2WebProp($where, $repository, $propCache, $revOrTransaction);

  if ($servers === null or empty($servers)) { continue; }
  
  $s = explode("\n", $servers);

  if ($is_dir) {
    foreach ($s AS $server) {
      $dirsAdded[$server][] = array($where, $relativePath."/");
    }
  }
  else {
    foreach ($s AS $server) {
      $filesModified[$server][] = array($where, $relativePath);
    }
  }
}

$todelete = array_merge_recursive($filesDeleted, $dirsDeleted);
$tocopy = array_merge_recursive($dirsAdded, $filesModified);

foreach ($todelete AS $server => $stuff) {
  preg_match('/(.*?):(.*)/', $server, $matches);
  if (count($matches) != 3) { echo "UNRECOGNIZED protocol: $server\n"; continue; }
  $howToConnect = $matches[1];
  $whereToConnect = escapeshellarg($matches[2]);

  $deleteArgs = "";
  foreach ($stuff AS $f) {
    $deleteArgs .= " ".escapeshellarg($f[1]);
  }

  // file: built-in, rest handled externally:
  if ($howToConnect == "file") {
    echo execSafe("(cd $whereToConnect; rm -rf $deleteArgs)");
  }
  else {
    echo execSafe("$thisDir/remove_$howToConnect $whereToConnect $deleteArgs");
  }
}

$tempDir = "/tmp/svn2web_".getmypid();
MakeDirectory($tempDir);
if (chdir($tempDir) === FALSE) { fwrite(STDERR, "Cannot chdir to temporary dir: $tempDir\n"); exit(1); }
$errors = array();

foreach ($tocopy AS $server => $stuff) {
  preg_match('/(.*?):(.*)/', $server, $matches);
  if (count($matches) != 3) { echo "UNRECOGNIZED protocol: $server\n"; continue; }
  $howToConnect = $matches[1];
  $whereToConnect = escapeshellarg($matches[2]);

  $dirsToCreate = "";
  $copyArgs = "";
  $haveDotFile = false;
  foreach ($stuff AS $f) {
    if (substr($f[0], -1, 1) == "/") {
      $dirsToCreate .= " ".escapeshellarg($f[1]);
    }
    else {
      $d = dirname($f[1]);
      if (!empty($d)) { MakeDirectory("$tempDir/$d"); }
      $rf = escapeshellarg($f[0]);
      $to = escapeshellarg($f[1]);
      if ($f[1][0] == ".") { $haveDotFile = true; }
      svnlook('cat',$repository,$revOrTransaction,"$rf > $to"); //execSafe("svnlook cat $revOrTransaction $repository $rf > $to");
      $copyArgs .= " ".$to;
    }
  }

  // file: built-in, rest handled externally:
  if ($howToConnect == "file") {
    if (!is_dir($whereToConnect)) {
			execSafe("mkdir -p $whereToConnect");
    }
    if (!empty($dirsToCreate)) {
			execSafe("cd $whereToConnect && mkdir -p $dirsToCreate");
    }
    if (!empty($copyArgs)) {
			execSafe("cp -r * $whereToConnect");
      if ($haveDotFile) {
				execSafe("cp -r * $whereToConnect");
      }
    }
  }
  else {
		execSafe("$thisDir/put_$howToConnect $whereToConnect ".escapeshellarg($options)." ".escapeshellarg($tempDir)." $copyArgs");
  }
}
chdir("/");
execSafe("rm -rf $tempDir");

/*
print_r($errors);

if (!empty($errors)) {
   fwrite(STDERR, implode("\n", $errors));
   exit(1);
}
*/
exit(0);

/**
 * Helper: exec a shell command, saving error output in $errors array.
 */
function runCommand($command, &$errors)
{
  exec("($command) 2>&1", $output, $err);
  if ($err) { $errors[] = "$command: exit code ".intval($err)." --> ".implode("\n", $output); }
  return $err;
}

/**
 * Helper: recursive mkdir
 */
function MakeDirectory($dir, $mode = 0755)
{
  if (is_dir($dir) || @mkdir($dir,$mode)) return TRUE;
  if (!MakeDirectory(dirname($dir),$mode)) return FALSE;
  return @mkdir($dir,$mode);
}

/**
 * Figure out where (if anywhere) path $where should be copied.
 * Looks for the svn2web property, all the way up the path--
 * uses the first it finds.
 * 
 * Returns an array of two elements-- the svn2web property, and the
 * relative path from where that property is set in the tree down
 * to $where.  Returns array(null,null) if no svn2web properties set.
 */
function getSVN2WebProp($where, $repository, &$propCache, $aRevOrTransaction=null)
{
  if (empty($where)) { return array(null, null); }
  if (isset($propCache[$where])) { return $propCache[$where]; }
  
  $w = escapeshellarg($where);
  $props = svnlook('proplist',$repository,$aRevOrTransaction,$w);	//execSafe("svnlook proplist $r $repository $w");

  $servers = null;
  if (strpos($props, 'svn2web') !== FALSE) {
    $servers = svnlook('propget',$repository,$aRevOrTransaction,"svn2web $w");	//execSafe("svnlook propget $r $repository svn2web $w");
    $servers = trim($servers);
  }
  $result = array(null, null);
  if (!empty($servers)) {
     $result[0] = $servers;
     $result[1] = "";
  }
  elseif (dirname($where) != $where) {
    $r = getSVN2WebProp(dirname($where), $repository, $propCache, $aRevOrTransaction);
    if ($r[0]) {
      $f = basename($where);
      $result[0] = $r[0];
      $result[1] = (empty($r[1]) ? $f : $r[1]."/".$f);
    }
  }
  $propCache[$where] = $result;
  return $result;
}

//Alpha function to add options to svn, not yet documented
function getSVN2WebOptionsProp($where, $repository, $aRevOrTransaction=null)
{
  if (empty($where)) { return array(null, null); }
  
  $w = escapeshellarg(dirname($where));
  $props = svnlook('proplist',$repository,$aRevOrTransaction,$w); //execSafe("svnlook proplist $r $repository $w");

  $options = null;
  if (strpos($props, 'svn2web-options') !== FALSE) {
    $options = svnlook('propget',$repository,$aRevOrTransaction,"svn2web-options $w"); //execSafe("svnlook propget $r $repository svn2web-options $w");
    $options = trim($options);
  } else { $options = ''; }
  return $options;
}

?>
